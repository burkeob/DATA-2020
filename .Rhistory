geom_vline(aes(xintercept=bestlam)) +
theme(legend.position='bottom', legend.key.size = unit(.4, 'cm')) +
labs(title = "Coefficient Values at Each Lambda", x = "Lambda")
data_long_trunc <- data_long_e %>% filter(name >= 0.005) %>% filter(value != 0)
ggplot(data_long_trunc, aes(x=name, y=value, group=CoefName, color=CoefName)) +
geom_line() +
geom_hline(aes(yintercept=0)) +
geom_vline(aes(xintercept=bestlam)) +
theme(legend.position='bottom', legend.key.size = unit(.4, 'cm')) +
labs(title = "Coefficient Values at Each Lambda", x = "Lambda")
stat_matrix
# Testing out some vizs for Lasso Regression
var.id = -1
bestlam <- best_lmbda_cv[[var.id]]
# Testing out some vizs for Lasso Regression
var.id = 10
bestlam <- best_lmbda_cv[[var.id]]
# Testing out some vizs for Lasso Regression
var.id = 9
bestlam <- best_lmbda_cv[[var.id]]
coef_passes <- data.frame(as.matrix(lasso_beta[[var.id]]))
colnames(coef_passes) <-  as.character(lasso_lambda[[var.id]])
coef_passes <- cbind(CoefName = rownames(coef_passes), coef_passes)
rownames(coef_passes) <- 1:nrow(coef_passes)
data_long_e <- coef_passes %>% # Apply pivot_longer function
pivot_longer(colnames(coef_passes)[-1]) %>%
as.data.frame()
data_long_e$name <- as.numeric(data_long_e$name)
data_long_trunc <- data_long_e %>% filter(name >= bestlam) %>% filter(value != 0)
ggplot(data_long_trunc, aes(x=name, y=value, group=CoefName, color=CoefName)) +
geom_line() +
geom_hline(aes(yintercept=0)) +
geom_vline(aes(xintercept=bestlam)) +
theme(legend.position='bottom', legend.key.size = unit(.4, 'cm')) +
labs(title = "Coefficient Values at Each Lambda", x = "Lambda")
# Testing out some vizs for Lasso Regression
var.id = 9
bestlam <- best_lmbda_cv[[var.id]]
coef_passes <- data.frame(as.matrix(lasso_beta[[var.id]]))
colnames(coef_passes) <-  as.character(lasso_lambda[[var.id]])
coef_passes <- cbind(CoefName = rownames(coef_passes), coef_passes)
rownames(coef_passes) <- 1:nrow(coef_passes)
data_long_e <- coef_passes %>% # Apply pivot_longer function
pivot_longer(colnames(coef_passes)[-1]) %>%
as.data.frame()
data_long_e$name <- as.numeric(data_long_e$name)
data_long_trunc <- data_long_e #%>% filter(name >= bestlam) %>% filter(value != 0)
ggplot(data_long_trunc, aes(x=name, y=value, group=CoefName, color=CoefName)) +
geom_line() +
geom_hline(aes(yintercept=0)) +
geom_vline(aes(xintercept=bestlam)) +
theme(legend.position='bottom', legend.key.size = unit(.4, 'cm')) +
labs(title = "Coefficient Values at Each Lambda", x = "Lambda")
# Testing out some vizs for Lasso Regression
var.id = 9
bestlam <- best_lmbda_cv[[var.id]]
coef_passes <- data.frame(as.matrix(lasso_beta[[var.id]]))
colnames(coef_passes) <-  as.character(lasso_lambda[[var.id]])
coef_passes <- cbind(CoefName = rownames(coef_passes), coef_passes)
rownames(coef_passes) <- 1:nrow(coef_passes)
data_long_e <- coef_passes %>% # Apply pivot_longer function
pivot_longer(colnames(coef_passes)[-1]) %>%
as.data.frame()
data_long_e$name <- as.numeric(data_long_e$name)
data_long_trunc <- data_long_e %>% filter(name >= bestlam) %>% filter(value != 0)
ggplot(data_long_trunc, aes(x=name, y=value, group=CoefName, color=CoefName)) +
geom_line() +
geom_hline(aes(yintercept=0)) +
geom_vline(aes(xintercept=bestlam)) +
theme(legend.position='bottom', legend.key.size = unit(.4, 'cm')) +
labs(title = "Coefficient Values at Each Lambda", x = "Lambda")
library(tidyverse)
library(readxl)
setwd("C:/Users/14102/Brown/DATA-2020/")
df <- read_excel("GSS.xlsx") |>
filter(year == 1987 | (year == 2021 & ballot == "Ballot c") | (year == 2021 & ballot == "Ballot b")) |>
select(-c(ballot, id_))
# make combined weight column
df <- df |>
mutate(wgt_comb = ifelse(year == 1987, wtssall, wtssnrps))
# replace outcome vars with 1 if agree, 0 if disagree, and NA if missing or unsure
df$wealth_imp = ifelse(df$opwlth %in% c("Very important", "Fairly important", "Essential"), 1, 0)
df$wealth_imp = ifelse((df$opwlth %in% c("Not important at all", "Not very important") | df$wealth_imp == 1), df$wealth_imp, NA)
df$parents_imp = ifelse(df$oppared %in% c("Very important", "Fairly important", "Essential"), 1, 0)
df$parents_imp = ifelse((df$oppared %in% c("Not important at all", "Not very important") | df$parents_imp == 1), df$parents_imp, NA)
df$educ_imp = ifelse(df$opeduc %in% c("Very important", "Fairly important", "Essential"), 1, 0)
df$educ_imp = ifelse((df$opeduc %in% c("Not important at all", "Not very important") | df$educ_imp == 1), df$educ_imp, NA)
df$hardWork_imp = ifelse(df$ophrdwrk %in% c("Very important", "Fairly important", "Essential"), 1, 0)
df$hardWork_imp = ifelse((df$ophrdwrk %in% c("Not important at all", "Not very important") | df$hardWork_imp == 1), df$hardWork_imp, NA)
df$rightPpl_imp = ifelse(df$opknow %in% c("Very important", "Fairly important", "Essential"), 1, 0)
df$rightPpl_imp = ifelse((df$opknow %in% c("Not important at all", "Not very important") | df$rightPpl_imp == 1), df$rightPpl_imp, NA)
df$political_imp = ifelse(df$opclout %in% c("Very important", "Fairly important", "Essential"), 1, 0)
df$political_imp = ifelse((df$opclout %in% c("Not important at all", "Not very important") | df$political_imp == 1), df$political_imp, NA)
df$race_imp = ifelse(df$oprace %in% c("Very important", "Fairly important", "Essential"), 1, 0)
df$race_imp = ifelse((df$oprace %in% c("Not important at all", "Not very important") | df$race_imp == 1), df$race_imp, NA)
df$religion_imp = ifelse(df$oprelig %in% c("Very important", "Fairly important", "Essential"), 1, 0)
df$religion_imp = ifelse((df$oprelig %in% c("Not important at all", "Not very important") | df$religion_imp == 1), df$religion_imp, NA)
df$sex_imp = ifelse(df$opsex %in% c("Very important", "Fairly important", "Essential"), 1, 0)
df$sex_imp = ifelse((df$opsex %in% c("Not important at all", "Not very important") | df$sex_imp == 1), df$sex_imp, NA)
# Drop the orignial outcomes vars - can add them back in if we want more detail
df <- df |>
select(-c(opsex,oprelig,oprace,opclout,opknow,ophrdwrk,opeduc,oppared,opwlth))
# Clean the feature vars
# Start with categorical - can keep missing values as their own category
df <- df |>
mutate(year = as.factor(year))
df <- df |>
mutate(wrkstat = ifelse(wrkstat %in% c(".n:  No answer" , ".s:  Skipped on Web"), "missing", wrkstat)) |>
mutate(wrkstat = as.factor(wrkstat))
df <- df |>
mutate(marital = ifelse(marital %in% c(".n:  No answer" ,
".s:  Skipped on Web",
".d:  Do not Know/Cannot Choose"), "missing", marital)) |>
mutate(marital = as.factor(marital))
df <- df |>
mutate(sex = ifelse(sex %in% c(".n:  No answer" ,
".s:  Skipped on Web",
".i:  Inapplicable",
".d:  Do not Know/Cannot Choose"), "missing", sex)) |>
mutate(sex = as.factor(sex))
# Not really useful - lets just do above and below 25,000
df <- df |>
mutate(income = ifelse(income %in% c(".n:  No answer" ,
".s:  Skipped on Web",
".i:  Inapplicable",
".r:  Refused",
".d:  Do not Know/Cannot Choose"), "missing", ifelse(
income == "$25,000 or more", "$25,000 or more", "Less than $25,000"
))) |>
mutate(income = as.factor(income))
df <- df |>
mutate(region = as.factor(region))
# We may want to undo this, as a first pass I saw that strong demo was significant
df <- df |>
mutate(partyid = ifelse(partyid %in% c(".n:  No answer" ,
".s:  Skipped on Web",
".i:  Inapplicable",
".d:  Do not Know/Cannot Choose"), "missing", ifelse(
str_detect(partyid, "Ind"), "Independent",
ifelse(str_detect(partyid, "demo"), "Democrat", "Republican")
))) |>
mutate(partyid = as.factor(partyid))
df <- df |>
mutate(relig = ifelse(relig %in% c(".n:  No answer" ,
".s:  Skipped on Web",
".d:  Do not Know/Cannot Choose"), "missing", relig)) |>
mutate(relig = as.factor(relig))
# whether this person was born in this country
df <- df |>
mutate(born = ifelse(born %in% c("YES", "NO"), born, "missing")) |>
mutate(born = as.factor(born))
df <- df |>
mutate(income = as.factor(income))
levels(df$relig)
# Numerical - will have to do some sort of imputation to keep these
df <- df |>
mutate(age = as.numeric(age)) |>
mutate(age = ifelse(age < 0 , NA, age))
# educ is years of schooling
df <- df |>
mutate(educ = as.numeric(educ)) |>
mutate(educ = ifelse(educ < 0 , NA, educ))
# Target vars
# c(wealth_imp, parents_imp, educ_imp, hardWork_imp, rightPpl_imp, political_imp, race_imp, religion_imp, sex_imp)
# weight vars - don't include in any regressions or whatnot
# also don't include the id_ var
# wtssall, vstrat, vpsu, wgt_comb, oversamp, wtssnrps
save(df, file = "cleaned_data.Rdata")
load(file = "cleaned_data.Rdata")
library(tidyverse)
library(readxl)
library(dplyr)
library(ggplot2)
library(MASS)
library(haven)
library(glmnet)
# NEED TO INSTALL
library(survey)
set.seed(1)
# setwd("~/Desktop/DSI Spring/Stats/Final Project")
####################################################
# TODO: Get regression for each variable in a loop #
####################################################
make.mtrx <- function (df){
mtrx <- model.matrix(var ~ year+wrkstat+marital+age+race+educ+sex+born+income+region+partyid+relig+zodiac, df)
return (mtrx)
}
load('cleaned_data.Rdata')
df_covariates <- df %>% dplyr::select(year, wrkstat, marital, age, race, educ, sex, born, income,
region, partyid, relig, zodiac, vstrat, vpsu, wgt_comb)
df_variables <- df %>% dplyr::select(wealth_imp, sex_imp, parents_imp, educ_imp, hardWork_imp, rightPpl_imp,
political_imp, race_imp, religion_imp)
for (col in df_variables){
print(colnames(col))
}
col
stat_matrix <- matrix(NA, 9, 1)
fwd_mdl_list <- list()
bck_mdl_list <- list()
lasso_beta <- list()
lasso_lambda <- list()
best_lmbda_cv <- list()
idx <- 1
for (col in df_variables){
# Create data we need for specific variable
df_cov_temp <- df_covariates
df_cov_temp$var <- col
df_cov_temp <- df_cov_temp %>% drop_na()
model.mtrx.all <- make.mtrx(df_cov_temp)
lm_lasso <- glmnet(model.mtrx.all[,-1],
df_cov_temp$var,
weights = df_cov_temp$wgt_comb,
family=quasibinomial(link="logit"),
alpha = 1)
# Training model
lasso_mod_train <- cv.glmnet(model.mtrx.all[,-1],
df_cov_temp$var,
weights = df_cov_temp$wgt_comb,
family=quasibinomial(link="logit"),
alpha = 1)
# Select lambda that minimizes training MSE (from model using training data only)
best_lmbda_cv <- append(best_lmbda_cv, lasso_mod_train$lambda.min)
lasso_beta <- append(lasso_beta, lm_lasso$beta)
lasso_lambda <- append(lasso_lambda, list(lm_lasso$lambda))
# Create Survey design object to control weights
surv.des <- svydesign(data = df_cov_temp, ids = ~vpsu, weights = ~wgt_comb, strata = ~vstrat, nest=TRUE)
# t-test between year and variable
ttest.svy <- svyttest(formula = var ~ year, design = surv.des)
stat_matrix[idx] <- ttest.svy$p.value
# Forward and Backward stepwise regression
#lm_full <- svyglm(formula = var ~ year+wrkstat+marital+age+race+educ+sex+born+income+region+partyid+relig+zodiac,
#                  design = surv.des, family=quasibinomial(link="logit"))
#lm_none <- svyglm(formula = var~1, design = surv.des, family=quasibinomial(link="logit"), data = df_cov_temp)
#
#fwd_step_mdl <- stepAIC(object = lm_none, direction='forward', scope=list(upper=lm_full, lower=lm_none))
#fwd_mdl_list <- append(fwd_mdl_list, list(summary(fwd_step_mdl)))
#
## Using AIC as metric for feature selection
#bkd_step_mdl <- stepAIC(lm_full, direction='backward')
#bck_mdl_list <- append(bck_mdl_list, list(summary(bkd_step_mdl)))
idx <- idx + 1
}
# Testing out some vizs for Lasso Regression
var.id = 9
bestlam <- best_lmbda_cv[[var.id]]
coef_passes <- data.frame(as.matrix(lasso_beta[[var.id]]))
colnames(coef_passes) <-  as.character(lasso_lambda[[var.id]])
coef_passes <- cbind(CoefName = rownames(coef_passes), coef_passes)
rownames(coef_passes) <- 1:nrow(coef_passes)
data_long_e <- coef_passes %>% # Apply pivot_longer function
pivot_longer(colnames(coef_passes)[-1]) %>%
as.data.frame()
data_long_e$name <- as.numeric(data_long_e$name)
data_long_trunc <- data_long_e %>% filter(name >= bestlam) %>% filter(value != 0)
ggplot(data_long_trunc, aes(x=name, y=value, group=CoefName, color=CoefName)) +
geom_line() +
geom_hline(aes(yintercept=0)) +
geom_vline(aes(xintercept=bestlam)) +
theme(legend.position='bottom', legend.key.size = unit(.4, 'cm')) +
labs(title = "Coefficient Values at Each Lambda", x = "Lambda")
stat_matrix
stat_matrix <- matrix(NA, 9, 2)
fwd_mdl_list <- list()
bck_mdl_list <- list()
lasso_beta <- list()
lasso_lambda <- list()
best_lmbda_cv <- list()
idx <- 1
for (cname in colnames(df_variables)){
stat_matrix[1,idx] <- cname
idx <- idx + 1
}
stat_matrix
stat_matrix[1]
stat_matrix[1, ]
stat_matrix[2, ]
stat_matrix[1, ]
stat_matrix[1, 1]
stat_matrix <- matrix(NA, 9, 2)
fwd_mdl_list <- list()
bck_mdl_list <- list()
lasso_beta <- list()
lasso_lambda <- list()
best_lmbda_cv <- list()
idx <- 1
for (cname in colnames(df_variables)){
stat_matrix[idx,1] <- cname
idx <- idx + 1
}
idx <- 1
stat_matrix
idx <- 1
for (col in df_variables){
# Create data we need for specific variable
df_cov_temp <- df_covariates
df_cov_temp$var <- col
df_cov_temp <- df_cov_temp %>% drop_na()
model.mtrx.all <- make.mtrx(df_cov_temp)
lm_lasso <- glmnet(model.mtrx.all[,-1],
df_cov_temp$var,
weights = df_cov_temp$wgt_comb,
family=quasibinomial(link="logit"),
alpha = 1)
# Training model
lasso_mod_train <- cv.glmnet(model.mtrx.all[,-1],
df_cov_temp$var,
weights = df_cov_temp$wgt_comb,
family=quasibinomial(link="logit"),
alpha = 1)
# Select lambda that minimizes training MSE (from model using training data only)
best_lmbda_cv <- append(best_lmbda_cv, lasso_mod_train$lambda.min)
lasso_beta <- append(lasso_beta, lm_lasso$beta)
lasso_lambda <- append(lasso_lambda, list(lm_lasso$lambda))
# Create Survey design object to control weights
surv.des <- svydesign(data = df_cov_temp, ids = ~vpsu, weights = ~wgt_comb, strata = ~vstrat, nest=TRUE)
# t-test between year and variable
ttest.svy <- svyttest(formula = var ~ year, design = surv.des)
stat_matrix[idx, 2] <- ttest.svy$p.value
# Forward and Backward stepwise regression
#lm_full <- svyglm(formula = var ~ year+wrkstat+marital+age+race+educ+sex+born+income+region+partyid+relig+zodiac,
#                  design = surv.des, family=quasibinomial(link="logit"))
#lm_none <- svyglm(formula = var~1, design = surv.des, family=quasibinomial(link="logit"), data = df_cov_temp)
#
#fwd_step_mdl <- stepAIC(object = lm_none, direction='forward', scope=list(upper=lm_full, lower=lm_none))
#fwd_mdl_list <- append(fwd_mdl_list, list(summary(fwd_step_mdl)))
#
## Using AIC as metric for feature selection
#bkd_step_mdl <- stepAIC(lm_full, direction='backward')
#bck_mdl_list <- append(bck_mdl_list, list(summary(bkd_step_mdl)))
idx <- idx + 1
}
stat_matrix
var.id = 8
bestlam <- best_lmbda_cv[[var.id]]
coef_passes <- data.frame(as.matrix(lasso_beta[[var.id]]))
colnames(coef_passes) <-  as.character(lasso_lambda[[var.id]])
coef_passes <- cbind(CoefName = rownames(coef_passes), coef_passes)
rownames(coef_passes) <- 1:nrow(coef_passes)
data_long_e <- coef_passes %>% # Apply pivot_longer function
pivot_longer(colnames(coef_passes)[-1]) %>%
as.data.frame()
data_long_e$name <- as.numeric(data_long_e$name)
data_long_trunc <- data_long_e %>% filter(name >= bestlam) %>% filter(value != 0)
ggplot(data_long_trunc, aes(x=name, y=value, group=CoefName, color=CoefName)) +
geom_line() +
geom_hline(aes(yintercept=0)) +
geom_vline(aes(xintercept=bestlam)) +
theme(legend.position='bottom', legend.key.size = unit(.4, 'cm')) +
labs(title = "Coefficient Values at Each Lambda", x = "Lambda")
data_long_trunc %>% filter(name = bestlam) %>% filter(value != 0)
data_long_trunc %>% filter(name == bestlam) %>% filter(value != 0)
data_long_trunc %>% filter(name >= bestlam) %>% filter(value != 0)
bestlam
data_long_trunc %>% filter(name == bestlam) %>% filter(value != 0)
data_long_trunc %>% filter(as.character(name) == as.character(bestlam)) %>% filter(value != 0)
?sort
data_long_trunc %>% filter(as.character(name) == as.character(bestlam)) %>% filter(value != 0) %>% sort(abs(value), decreasing=FALSE)
data_long_trunc %>% filter(as.character(name) == as.character(bestlam)) %>% filter(value != 0) %>% sort(abs(data_long_trunc$value), decreasing=FALSE)
data_long_trunc %>% filter(as.character(name) == as.character(bestlam)) %>% filter(value != 0) %>% arrange(value)
data_long_trunc %>% filter(as.character(name) == as.character(bestlam)) %>% filter(value != 0) %>% arrange(abs(value))
data_long_trunc %>% filter(as.character(name) == as.character(bestlam)) %>% filter(value != 0) %>% desc(abs(value), )
data_long_trunc %>% filter(as.character(name) == as.character(bestlam)) %>% filter(value != 0) %>% desc(abs(value))
data_long_trunc %>% filter(as.character(name) == as.character(bestlam)) %>% filter(value != 0) %>% desc()
data_long_trunc %>% filter(as.character(name) == as.character(bestlam)) %>% filter(value != 0) %>% desc(value)
data_long_trunc %>% filter(as.character(name) == as.character(bestlam)) %>% filter(value != 0) %>% desc(data_long_trunc$value)
data_long_trunc %>% filter(as.character(name) == as.character(bestlam)) %>% filter(value != 0) %>% desc(data_long_trunc, value)
data_long_trunc %>% filter(as.character(name) == as.character(bestlam)) %>% filter(value != 0) %>% arrange(desc(abs(value)))
stat_matrix
# Testing out some vizs for Lasso Regression
var.id = 9
bestlam <- best_lmbda_cv[[var.id]]
coef_passes <- data.frame(as.matrix(lasso_beta[[var.id]]))
colnames(coef_passes) <-  as.character(lasso_lambda[[var.id]])
coef_passes <- cbind(CoefName = rownames(coef_passes), coef_passes)
rownames(coef_passes) <- 1:nrow(coef_passes)
data_long_e <- coef_passes %>% # Apply pivot_longer function
pivot_longer(colnames(coef_passes)[-1]) %>%
as.data.frame()
data_long_e$name <- as.numeric(data_long_e$name)
data_long_trunc <- data_long_e %>% filter(name >= bestlam) %>% filter(value != 0)
ggplot(data_long_trunc, aes(x=name, y=value, group=CoefName, color=CoefName)) +
geom_line() +
geom_hline(aes(yintercept=0)) +
geom_vline(aes(xintercept=bestlam)) +
theme(legend.position='bottom', legend.key.size = unit(.4, 'cm')) +
labs(title = "Coefficient Values at Each Lambda", x = "Lambda")
data_long_trunc %>% filter(as.character(name) == as.character(bestlam)) %>% filter(value != 0) %>% arrange(desc(abs(value)))
data_long_trunc
bestlam
# Testing out some vizs for Lasso Regression
var.id = 1
bestlam <- best_lmbda_cv[[var.id]]
coef_passes <- data.frame(as.matrix(lasso_beta[[var.id]]))
colnames(coef_passes) <-  as.character(lasso_lambda[[var.id]])
coef_passes <- cbind(CoefName = rownames(coef_passes), coef_passes)
rownames(coef_passes) <- 1:nrow(coef_passes)
data_long_e <- coef_passes %>% # Apply pivot_longer function
pivot_longer(colnames(coef_passes)[-1]) %>%
as.data.frame()
data_long_e$name <- as.numeric(data_long_e$name)
data_long_trunc <- data_long_e %>% filter(name >= bestlam) %>% filter(value != 0)
ggplot(data_long_trunc, aes(x=name, y=value, group=CoefName, color=CoefName)) +
geom_line() +
geom_hline(aes(yintercept=0)) +
geom_vline(aes(xintercept=bestlam)) +
theme(legend.position='bottom', legend.key.size = unit(.4, 'cm')) +
labs(title = "Coefficient Values at Each Lambda", x = "Lambda")
data_long_trunc %>% filter(as.character(name) == as.character(bestlam)) %>% filter(value != 0) %>% arrange(desc(abs(value)))
data_long_trunc
bestlam
data_long_trunc %>% filter(min(name) == bestlam) %>% filter(value != 0) %>% arrange(desc(abs(value)))
data_long_trunc %>% filter(min(name) == name) %>% filter(value != 0) %>% arrange(desc(abs(value)))
# Testing out some vizs for Lasso Regression
var.id = 2
bestlam <- best_lmbda_cv[[var.id]]
coef_passes <- data.frame(as.matrix(lasso_beta[[var.id]]))
colnames(coef_passes) <-  as.character(lasso_lambda[[var.id]])
coef_passes <- cbind(CoefName = rownames(coef_passes), coef_passes)
rownames(coef_passes) <- 1:nrow(coef_passes)
data_long_e <- coef_passes %>% # Apply pivot_longer function
pivot_longer(colnames(coef_passes)[-1]) %>%
as.data.frame()
data_long_e$name <- as.numeric(data_long_e$name)
data_long_trunc <- data_long_e %>% filter(name >= bestlam) %>% filter(value != 0)
ggplot(data_long_trunc, aes(x=name, y=value, group=CoefName, color=CoefName)) +
geom_line() +
geom_hline(aes(yintercept=0)) +
geom_vline(aes(xintercept=bestlam)) +
theme(legend.position='bottom', legend.key.size = unit(.4, 'cm')) +
labs(title = "Coefficient Values at Each Lambda", x = "Lambda")
data_long_trunc %>% filter(min(name) == name) %>% filter(value != 0) %>% arrange(desc(abs(value)))
# Testing out some vizs for Lasso Regression
var.id = 4
bestlam <- best_lmbda_cv[[var.id]]
coef_passes <- data.frame(as.matrix(lasso_beta[[var.id]]))
colnames(coef_passes) <-  as.character(lasso_lambda[[var.id]])
coef_passes <- cbind(CoefName = rownames(coef_passes), coef_passes)
rownames(coef_passes) <- 1:nrow(coef_passes)
data_long_e <- coef_passes %>% # Apply pivot_longer function
pivot_longer(colnames(coef_passes)[-1]) %>%
as.data.frame()
data_long_e$name <- as.numeric(data_long_e$name)
data_long_trunc <- data_long_e %>% filter(name >= bestlam) %>% filter(value != 0)
ggplot(data_long_trunc, aes(x=name, y=value, group=CoefName, color=CoefName)) +
geom_line() +
geom_hline(aes(yintercept=0)) +
geom_vline(aes(xintercept=bestlam)) +
theme(legend.position='bottom', legend.key.size = unit(.4, 'cm')) +
labs(title = "Coefficient Values at Each Lambda", x = "Lambda")
data_long_trunc %>% filter(min(name) == name) %>% filter(value != 0) %>% arrange(desc(abs(value)))
data_long_trunc
data_long_e
bestlam
stat_matrix
# Testing out some vizs for Lasso Regression
var.id = 3
bestlam <- best_lmbda_cv[[var.id]]
coef_passes <- data.frame(as.matrix(lasso_beta[[var.id]]))
colnames(coef_passes) <-  as.character(lasso_lambda[[var.id]])
coef_passes <- cbind(CoefName = rownames(coef_passes), coef_passes)
rownames(coef_passes) <- 1:nrow(coef_passes)
data_long_e <- coef_passes %>% # Apply pivot_longer function
pivot_longer(colnames(coef_passes)[-1]) %>%
as.data.frame()
data_long_e$name <- as.numeric(data_long_e$name)
data_long_trunc <- data_long_e %>% filter(name >= bestlam) %>% filter(value != 0)
ggplot(data_long_trunc, aes(x=name, y=value, group=CoefName, color=CoefName)) +
geom_line() +
geom_hline(aes(yintercept=0)) +
geom_vline(aes(xintercept=bestlam)) +
theme(legend.position='bottom', legend.key.size = unit(.4, 'cm')) +
labs(title = "Coefficient Values at Each Lambda", x = "Lambda")
data_long_trunc %>% filter(min(name) == name) %>% filter(value != 0) %>% arrange(desc(abs(value)))
# Testing out some vizs for Lasso Regression
var.id = 5
bestlam <- best_lmbda_cv[[var.id]]
coef_passes <- data.frame(as.matrix(lasso_beta[[var.id]]))
colnames(coef_passes) <-  as.character(lasso_lambda[[var.id]])
coef_passes <- cbind(CoefName = rownames(coef_passes), coef_passes)
rownames(coef_passes) <- 1:nrow(coef_passes)
data_long_e <- coef_passes %>% # Apply pivot_longer function
pivot_longer(colnames(coef_passes)[-1]) %>%
as.data.frame()
data_long_e$name <- as.numeric(data_long_e$name)
data_long_trunc <- data_long_e %>% filter(name >= bestlam) %>% filter(value != 0)
ggplot(data_long_trunc, aes(x=name, y=value, group=CoefName, color=CoefName)) +
geom_line() +
geom_hline(aes(yintercept=0)) +
geom_vline(aes(xintercept=bestlam)) +
theme(legend.position='bottom', legend.key.size = unit(.4, 'cm')) +
labs(title = "Coefficient Values at Each Lambda", x = "Lambda")
data_long_trunc %>% filter(min(name) == name) %>% filter(value != 0) %>% arrange(desc(abs(value)))
stat_matrix
# Testing out some vizs for Lasso Regression
var.id = 6
bestlam <- best_lmbda_cv[[var.id]]
coef_passes <- data.frame(as.matrix(lasso_beta[[var.id]]))
colnames(coef_passes) <-  as.character(lasso_lambda[[var.id]])
coef_passes <- cbind(CoefName = rownames(coef_passes), coef_passes)
rownames(coef_passes) <- 1:nrow(coef_passes)
data_long_e <- coef_passes %>% # Apply pivot_longer function
pivot_longer(colnames(coef_passes)[-1]) %>%
as.data.frame()
data_long_e$name <- as.numeric(data_long_e$name)
data_long_trunc <- data_long_e %>% filter(name >= bestlam) %>% filter(value != 0)
ggplot(data_long_trunc, aes(x=name, y=value, group=CoefName, color=CoefName)) +
geom_line() +
geom_hline(aes(yintercept=0)) +
geom_vline(aes(xintercept=bestlam)) +
theme(legend.position='bottom', legend.key.size = unit(.4, 'cm')) +
labs(title = "Coefficient Values at Each Lambda", x = "Lambda")
data_long_trunc %>% filter(min(name) == name) %>% filter(value != 0) %>% arrange(desc(abs(value)))
