educ_full <- svyglm(formula = educ_imp~year+wrkstat+marital+age+race+educ+sex+born+income
+region+partyid+relig+zodiac,
design = surv.des, family=quasibinomial(link="logit"))
educ_none <- svyglm(formula = educ_imp~1,
design = surv.des, family=quasibinomial(link="logit"))
# Using AIC as metric for feature selection
fwd_step_mdl <- stepAIC(educ_none, direction='forward', scope=list(upper=educ_full, lower=educ_none))
educ_full <- svyglm(formula = educ_imp~year+wrkstat+marital+age+race+educ+sex+born+income
+region+partyid+relig+zodiac,
design = surv.des, family=quasibinomial(link="logit"))
educ_none <- svyglm(formula = ~educ_imp~1,
design = surv.des, family=quasibinomial(link="logit"))
educ_full <- svyglm(formula = educ_imp~year+wrkstat+marital+age+race+educ+sex+born+income
+region+partyid+relig+zodiac,
design = surv.des, family=quasibinomial(link="logit"))
educ_none <- svyglm(formula = educ_imp~year, design = surv.des, family=quasibinomial(link="logit"))
# Using AIC as metric for feature selection
fwd_step_mdl <- stepAIC(educ_none, direction='forward', scope=list(upper=educ_full, lower=educ_none))
bkd_step_mdl <- stepAIC(educ_full, direction='backward')
summary(bkd_step_mdl)
summary(educ_none)
educ_none <- svyglm(formula = educ_imp~1, design = surv.des, family=quasibinomial(link="logit"))
summary(educ_none)
# Using AIC as metric for feature selection
fwd_step_mdl <- stepAIC(educ_none, direction='forward')
# Using AIC as metric for feature selection
fwd_step_mdl <- stepAIC(educ_none, direction='forward', scope=list(upper=educ_full))
educ_full <- svyglm(formula = educ_imp~year+wrkstat+marital+age+race+educ+sex+born+income
+region+partyid+relig+zodiac,
design = surv.des, family=quasibinomial(link="logit"))
educ_none <- svyglm(formula = educ_imp~1, design = surv.des, family=quasibinomial(link="logit"))
# Using AIC as metric for feature selection
fwd_step_mdl <- stepAIC(educ_none, direction='forward', scope=list(upper=educ_full, lower=educ_none))
load('cleaned_data.Rdata')
# df <- df %>% dplyr::select(educ_imp, year, wrkstat, marital, age, race, educ, sex, born, income,
#                            region, partyid, relig, zodiac, vstrat, vpsu, wgt_comb) %>% drop_na()
surv.des <- svydesign(data = df, ids = ~vpsu, weights = ~wgt_comb, strata = ~vstrat, nest=TRUE)
educ_full <- svyglm(formula = educ_imp~year+wrkstat+marital+age+race+educ+sex+born+income
+region+partyid+relig+zodiac,
design = surv.des, family=quasibinomial(link="logit"))
educ_none <- svyglm(formula = educ_imp~1, design = surv.des, family=quasibinomial(link="logit"))
# Using AIC as metric for feature selection
fwd_step_mdl <- stepAIC(educ_none, direction='forward', scope=list(upper=educ_full, lower=educ_none))
educ_none <- svyglm(formula = ~educ_imp, design = surv.des, family=quasibinomial(link="logit"))
educ_full <- svyglm(formula = educ_imp~year+wrkstat+marital+age+race+educ+sex+born+income
+region+partyid+relig+zodiac,
design = surv.des, family=quasibinomial(link="logit"))
educ_none <- svyglm(formula = educ_imp~1, design = surv.des, family=quasibinomial(link="logit"))
# Using AIC as metric for feature selection
fwd_step_mdl <- stepAIC(educ_none, direction='forward', scope=list(upper=educ_full, lower=educ_none))
df <- df %>% dplyr::select(educ_imp, year, wrkstat, marital, age, race, educ, sex, born, income,
region, partyid, relig, zodiac, vstrat, vpsu, wgt_comb) %>% drop_na()
educ_full <- svyglm(formula = educ_imp~year+wrkstat+marital+age+race+educ+sex+born+income
+region+partyid+relig+zodiac,
design = surv.des, family=quasibinomial(link="logit"))
educ_none <- svyglm(formula = educ_imp~1, design = surv.des, family=quasibinomial(link="logit"))
# Using AIC as metric for feature selection
fwd_step_mdl <- stepAIC(educ_none, direction='forward', scope=list(upper=educ_full, lower=educ_none))
# Using AIC as metric for feature selection
fwd_step_mdl <- stepAIC(object = educ_none, direction='forward', scope=list(upper=educ_full, lower=educ_none))
educ_none <- svyglm(formula = educ_imp~year, design = surv.des, family=quasibinomial(link="logit"))
# Using AIC as metric for feature selection
fwd_step_mdl <- stepAIC(object = educ_none, direction='forward', scope=list(upper=educ_full, lower=educ_none))
bkd_step_mdl <- stepAIC(educ_full, direction='backward')
summary(bkd_step_mdl)
load('cleaned_data.Rdata')
summary(fwd_step_mdl)
load('cleaned_data.Rdata')
educ_full <- svyglm(formula = educ_imp~year+wrkstat+marital+age+race+educ+sex+born+income
+region+partyid+relig+zodiac,
design = surv.des, family=quasibinomial(link="logit"))
surv.des <- svydesign(data = df, ids = ~vpsu, weights = ~wgt_comb, strata = ~vstrat, nest=TRUE)
educ_full <- svyglm(formula = educ_imp~year+wrkstat+marital+age+race+educ+sex+born+income
+region+partyid+relig+zodiac,
design = surv.des, family=quasibinomial(link="logit"))
educ_none <- svyglm(formula = educ_imp~1, design = surv.des, family=quasibinomial(link="logit"))
# Using AIC as metric for feature selection
fwd_step_mdl <- stepAIC(object = educ_none, direction='forward', scope=list(upper=educ_full, lower=educ_none))
summary(fwd_step_mdl)
# Using AIC as metric for feature selection
bkd_step_mdl <- stepAIC(educ_full, direction='backward')
summary(bkd_step_mdl)
wealth_full <- svyglm(formula = wealth_imp~year+wrkstat+marital+age+race+educ+sex+born+income
+region+partyid+relig+zodiac,
design = surv.des, family=quasibinomial(link="logit"))
bkd_step_wlth <- stepAIC(educ_full, direction='backward')
summary(bkd_step_wlth)
bkd_step_edu <- stepAIC(educ_full, direction='backward')
summary(bkd_step_edu)
summary(bkd_step_edu)
summary(bkd_step_wlth)
bkd_step_wlth <- stepAIC(wealth_full, direction='backward')
yes
?stepAIC()
load('cleaned_data.Rdata')
df <- df %>% dplyr::select(wealth_imp, year, wrkstat, marital, age, race, educ, sex, born, income,
region, partyid, relig, zodiac, vstrat, vpsu, wgt_comb) %>% drop_na()
surv.des <- svydesign(data = df, ids = ~vpsu, weights = ~wgt_comb, strata = ~vstrat, nest=TRUE)
wealth_full <- svyglm(formula = wealth_imp~year+wrkstat+marital+age+race+educ+sex+born+income
+region+partyid+relig+zodiac,
design = surv.des, family=quasibinomial(link="logit"))
bkd_step_wlth <- stepAIC(wealth_full, direction='backward')
summary(bkd_step_wlth)
summary(bkd_step_wlth)
load('cleaned_data.Rdata')
df <- df %>% dplyr::select(race_imp, year, wrkstat, marital, age, race, educ, sex, born, income,
region, partyid, relig, zodiac, vstrat, vpsu, wgt_comb) %>% drop_na()
surv.des <- svydesign(data = df, ids = ~vpsu, weights = ~wgt_comb, strata = ~vstrat, nest=TRUE)
race_full <- svyglm(formula = race_imp~year+wrkstat+marital+age+race+educ+sex+born+income
+region+partyid+relig+zodiac,
design = surv.des, family=quasibinomial(link="logit"))
bkd_step_wlth <- stepAIC(race_full, direction='backward')
summary(bkd_step_wlth)
race_none <- svyglm(formula = race_imp~1, design = surv.des, family=quasibinomial(link="logit"))
# Using AIC as metric for feature selection
fwd_step_race <- stepAIC(object = race_none, direction='forward', scope=list(upper=race_full, lower=race_none))
View(race_none)
race_none <- svyglm(formula = race_imp~year, design = surv.des, family=quasibinomial(link="logit"))
# Using AIC as metric for feature selection
fwd_step_race <- stepAIC(object = race_none, direction='forward', scope=list(upper=race_full, lower=race_none))
race_none <- svyglm(formula = race_imp~., design = surv.des, family=quasibinomial(link="logit"))
race_none <- svyglm(formula = race_imp~year, design = surv.des, family=quasibinomial(link="logit"), data = df)
# Using AIC as metric for feature selection
fwd_step_race <- stepAIC(object = race_none, direction='forward', scope=list(upper=race_full, lower=race_none))
summary(fwd_step_race)
summary(bkd_step_race)
summary(bkd_step_wlth)
race_none <- svyglm(formula = race_imp~1, design = surv.des, family=quasibinomial(link="logit"), data = df)
# Using AIC as metric for feature selection
fwd_step_race <- stepAIC(object = race_none, direction='forward', scope=list(upper=race_full, lower=race_none))
summary(fwd_step_race)
View(df)
df <- df %>% filter(race != '.i:  Inapplicable')
load('cleaned_data.Rdata')
df <- df %>% dplyr::select(race_imp, year, wrkstat, marital, age, race, educ, sex, born, income,
region, partyid, relig, zodiac, vstrat, vpsu, wgt_comb) %>% drop_na()
df <- df %>% filter(race != '.i:  Inapplicable')
surv.des <- svydesign(data = df, ids = ~vpsu, weights = ~wgt_comb, strata = ~vstrat, nest=TRUE)
race_full <- svyglm(formula = race_imp~year+wrkstat+marital+age+race+educ+sex+born+income
+region+partyid+relig+zodiac,
design = surv.des, family=quasibinomial(link="logit"))
race_none <- svyglm(formula = race_imp~1, design = surv.des, family=quasibinomial(link="logit"), data = df)
bkd_step_race <- stepAIC(race_full, direction='backward')
summary(bkd_step_race)
fwd_step_race <- stepAIC(object = race_none, direction='forward', scope=list(upper=race_full, lower=race_none))
summary(fwd_step_race)
load('cleaned_data.Rdata')
View(educ_full)
View(df)
View(df)
library(tidyverse)
library(readxl)
library(dplyr)
library(ggplot2)
library(MASS)
library(haven)
# NEED TO INSTALL
library(survey)
# setwd("~/Desktop/DSI Spring/Stats/Final Project")
####################################################
# TODO: Get regression for each variable in a loop #
####################################################
load('cleaned_data.Rdata')
df <- df %>% dplyr::select(race_imp, year, wrkstat, marital, age, race, educ, sex, born, income,
region, partyid, relig, zodiac, vstrat, vpsu, wgt_comb) %>% drop_na()
df <- df %>% filter(race != '.i:  Inapplicable')
surv.des <- svydesign(data = df, ids = ~vpsu, weights = ~wgt_comb, strata = ~vstrat, nest=TRUE)
df_variables <- df %>% dplyr::select(wealth_imp, sex_imp, parents_imp, educ_imp, hardWork_imp, rightPpl_imp,
political_imp, race_imp, religion_imp)
load('cleaned_data.Rdata')
df_covariates <- df %>% dplyr::select(year, wrkstat, marital, age, race, educ, sex, born, income,
region, partyid, relig, zodiac, vstrat, vpsu, wgt_comb)
df_variables <- df %>% dplyr::select(wealth_imp, sex_imp, parents_imp, educ_imp, hardWork_imp, rightPpl_imp,
political_imp, race_imp, religion_imp)
for (col in df_variables){
print(col)
}
?svyttest
ttest_pvals <- matrix(NA, 9, 1)
idx <- 1
for (col in df_variables){
# Create data we need for specific variable
df_cov_temp <- df_covariates
df_cov_temp$var <- col
df_cov_temp <- df_cov_temp %>% drop_na()
# Create Survey design object to control weights
surv.des <- svydesign(data = df_cov_temp, ids = ~vpsu, weights = ~wgt_comb, strata = ~vstrat, nest=TRUE)
ttest.svy <- svyttest(formula = var ~ year, design = surv.des)
confint(ttest.svy, level=0.95)
#ttest_pvals[idx] <- ttest.svy$
}
confint(ttest.svy, level=0.95)
ttest.svy
ttest.svy$p.value
df_covariates <- df %>% dplyr::select(year, wrkstat, marital, age, race, educ, sex, born, income,
region, partyid, relig, zodiac, vstrat, vpsu, wgt_comb)
df_variables <- df %>% dplyr::select(wealth_imp, sex_imp, parents_imp, educ_imp, hardWork_imp, rightPpl_imp,
political_imp, race_imp, religion_imp)
ttest_pvals <- matrix(NA, 9, 1)
idx <- 1
for (col in df_variables){
# Create data we need for specific variable
df_cov_temp <- df_covariates
df_cov_temp$var <- col
df_cov_temp <- df_cov_temp %>% drop_na()
# Create Survey design object to control weights
surv.des <- svydesign(data = df_cov_temp, ids = ~vpsu, weights = ~wgt_comb, strata = ~vstrat, nest=TRUE)
ttest.svy <- svyttest(formula = var ~ year, design = surv.des)
ttest_pvals[idx] <- ttest.svy$p.value
idx <- idx + 1
lm_full <- svyglm(formula = var ~ year+wrkstat+marital+age+race+educ+sex+born+income
+region+partyid+relig+zodiac,
design = surv.des, family=quasibinomial(link="logit"))
lm_none <- svyglm(formula = var~1, design = surv.des, family=quasibinomial(link="logit"), data = df_cov_temp)
fwd_step_mdl <- stepAIC(object = educ_none, direction='forward', scope=list(upper=educ_full, lower=educ_none))
summary(fwd_step_mdl)
# Using AIC as metric for feature selection
bkd_step_edu <- stepAIC(educ_full, direction='backward')
summary(bkd_step_edu)
}
df_covariates <- df %>% dplyr::select(year, wrkstat, marital, age, race, educ, sex, born, income,
region, partyid, relig, zodiac, vstrat, vpsu, wgt_comb)
df_variables <- df %>% dplyr::select(wealth_imp, sex_imp, parents_imp, educ_imp, hardWork_imp, rightPpl_imp,
political_imp, race_imp, religion_imp)
ttest_pvals <- matrix(NA, 9, 1)
idx <- 1
for (col in df_variables){
# Create data we need for specific variable
df_cov_temp <- df_covariates
df_cov_temp$var <- col
df_cov_temp <- df_cov_temp %>% drop_na()
# Create Survey design object to control weights
surv.des <- svydesign(data = df_cov_temp, ids = ~vpsu, weights = ~wgt_comb, strata = ~vstrat, nest=TRUE)
ttest.svy <- svyttest(formula = var ~ year, design = surv.des)
ttest_pvals[idx] <- ttest.svy$p.value
idx <- idx + 1
lm_full <- svyglm(formula = var ~ year+wrkstat+marital+age+race+educ+sex+born+income
+region+partyid+relig+zodiac,
design = surv.des, family=quasibinomial(link="logit"))
lm_none <- svyglm(formula = var~1, design = surv.des, family=quasibinomial(link="logit"), data = df_cov_temp)
fwd_step_mdl <- stepAIC(object = lm_none, direction='forward', scope=list(upper=lm_full, lower=lm_none))
summary(fwd_step_mdl)
# Using AIC as metric for feature selection
bkd_step_edu <- stepAIC(lm_full, direction='backward')
summary(bkd_step_edu)
}
summary(bkd_step_edu)
summary(fwd_step_mdl)
df_covariates <- df %>% dplyr::select(year, wrkstat, marital, age, race, educ, sex, born, income,
region, partyid, relig, zodiac, vstrat, vpsu, wgt_comb)
df_variables <- df %>% dplyr::select(wealth_imp, sex_imp, parents_imp, educ_imp, hardWork_imp, rightPpl_imp,
political_imp, race_imp, religion_imp)
stat_matrix <- matrix(NA, 9, 3)
idx <- 1
# (WIP) Forwards and Backwards Logistic Regression
for (col in df_variables){
# Create data we need for specific variable
df_cov_temp <- df_covariates
df_cov_temp$var <- col
df_cov_temp <- df_cov_temp %>% drop_na()
# Create Survey design object to control weights
surv.des <- svydesign(data = df_cov_temp, ids = ~vpsu, weights = ~wgt_comb, strata = ~vstrat, nest=TRUE)
# t-test
ttest.svy <- svyttest(formula = var ~ year, design = surv.des)
stat_matrix[idx, 1] <- ttest.svy$p.value
# Forward and Backward stepwise regression
lm_full <- svyglm(formula = var ~ year+wrkstat+marital+age+race+educ+sex+born+income
+region+partyid+relig+zodiac,
design = surv.des, family=quasibinomial(link="logit"))
lm_none <- svyglm(formula = var~1, design = surv.des, family=quasibinomial(link="logit"), data = df_cov_temp)
fwd_step_mdl <- stepAIC(object = lm_none, direction='forward', scope=list(upper=lm_full, lower=lm_none))
stat_matrix[idx, 2] <- summary(fwd_step_mdl)
# Using AIC as metric for feature selection
bkd_step_edu <- stepAIC(lm_full, direction='backward')
stat_matrix[idx, 3] <- summary(bkd_step_edu)
idx <- idx + 1
}
stat_matrix[1, 2]
summary(fwd_step_mdl)
stat_matrix[1,]
stat_matrix[1, 3]
df_covariates <- df %>% dplyr::select(year, wrkstat, marital, age, race, educ, sex, born, income,
region, partyid, relig, zodiac, vstrat, vpsu, wgt_comb)
df_variables <- df %>% dplyr::select(wealth_imp, sex_imp, parents_imp, educ_imp, hardWork_imp, rightPpl_imp,
political_imp, race_imp, religion_imp)
stat_matrix <- matrix(NA, 9, 3)
idx <- 1
# (WIP) Forwards and Backwards Logistic Regression
for (col in df_variables){
# Create data we need for specific variable
df_cov_temp <- df_covariates
df_cov_temp$var <- col
df_cov_temp <- df_cov_temp %>% drop_na()
# Create Survey design object to control weights
surv.des <- svydesign(data = df_cov_temp, ids = ~vpsu, weights = ~wgt_comb, strata = ~vstrat, nest=TRUE)
# t-test
ttest.svy <- svyttest(formula = var ~ year, design = surv.des)
stat_matrix[idx, 1] <- ttest.svy$p.value
# Forward and Backward stepwise regression
lm_full <- svyglm(formula = var ~ year+wrkstat+marital+age+race+educ+sex+born+income
+region+partyid+relig+zodiac,
design = surv.des, family=quasibinomial(link="logit"))
lm_none <- svyglm(formula = var~1, design = surv.des, family=quasibinomial(link="logit"), data = df_cov_temp)
fwd_step_mdl <- stepAIC(object = lm_none, direction='forward', scope=list(upper=lm_full, lower=lm_none))
stat_matrix[idx, 2] <- c(summary(fwd_step_mdl))
# Using AIC as metric for feature selection
bkd_step_edu <- stepAIC(lm_full, direction='backward')
stat_matrix[idx, 3] <- c(summary(bkd_step_edu))
idx <- idx + 1
}
c(summary(bkd_step_edu))
c(summary(bkd_step_edu$coefficients))
c(bkd_step_edu$coefficients)
(summary(bkd_step_edu$coefficients))
bkd_step_edu$coefficients
c(summary(bkd_step_edu))
bkd_step_edu
stat_matrix[1, 3] <- bkd_step_edu
bkd_step_edu
stat_matrix[1, 3] <- c(bkd_step_edu$)
stat_matrix[1, 3] <- c(bkd_step_edu)
stat_matrix[1][3] <- c(bkd_step_edu)
stat_matrix[1][3]
stat_matrix[1][1] <- c(bkd_step_edu)
stat_matrix
stat_matrix[1][1] <- bkd_step_edu
stat_matrix
stat_matrix <- matrix(NA, 9, 3)
stat_matrix[1] <- bkd_step_edu
stat_matrix
stat_matrix[1, 2] <- bkd_step_edu
stat_matrix <- matrix(NA, 9, 3)
stat_matrix[1, 2] <- bkd_step_edu
stat_matrix
stat_matrix[1, 2] <- (bkd_step_edu)
stat_matrix[1, 2] <- c(bkd_step_edu)
bkd_step_edu$weights
bkd_step_edu$coefficients
list(bkd_step_edu)
stat_matrix[1, 2] <- list(bkd_step_edu)
stat_matrix
list(summary(bkd_step_edu))
stat_matrix[1, 2] <- list(summary(bkd_step_edu))
stat_matrix <- matrix(NA, 9, 3)
stat_matrix[1, 2] <- list(summary(bkd_step_edu))
stat_matrix
stat_matrix <- matrix(NA, 9, 3)
stat_matrix[1, 2]
stat_matrix[1, 2] <- 3#list(summary(bkd_step_edu))
stat_matrix
str(summary(bkd_step_edu)))
str(summary(bkd_step_edu))
summary(bkd_step_edu)
summary(bkd_step_edu)
bkd_step_edu$fitted.values
bkd_step_edu$R
bkd_step_edu$data
bkd_step_edu$terms
bkd_step_edu$effects
bkd_step_edu$linear.predictors
bkd_step_edu$model
bkd_step_edu$call
bkd_step_edu$terms
bkd_step_edu$anova
stat_matrix[idx, 3] <-bkd_step_edu$anova
stat_matrix[idx, 3] <- bkd_step_edu$anova
stat_matrix[idx, 3] <- c(bkd_step_edu$anova)
stat_matrix
bkd_step_edu$anova
class(bkd_step_edu$anova)
stat_matrix <- matrix(NA, 9, 3)
stat_matrix[idx, 3] <- bkd_step_edu$anova
stat_matrix[idx, 2:] <- bkd_step_edu$anova
stat_matrix[idx, 2] <- bkd_step_edu$anova
stat_matrix[idx, 2,] <- bkd_step_edu$anova
stat_matrix[idx, 2:3] <- bkd_step_edu$anova
stat_matrix[idx, 2:3] <- bkd_step_edu$anova[1]
stat_matrix
stat_matrix[idx, 2:3] <- bkd_step_edu$anova[2]
bkd_step_edu$anova[2]
bkd_step_edu$anova[1]
bkd_step_edu$anova
list(bkd_step_edu$anova)
list(bkd_step_edu$anova)
stat_matrix[idx, 2] <- list(bkd_step_edu$anova)
stat_matrix <- matrix(NA, 9, 3)
stat_matrix[idx, 2] <- list(bkd_step_edu$anova)
stat_matrix
stat_matrix <- matrix(NA, 9, 3)
idx <- 1
# (WIP) Forwards and Backwards Logistic Regression
for (col in df_variables){
# Create data we need for specific variable
df_cov_temp <- df_covariates
df_cov_temp$var <- col
df_cov_temp <- df_cov_temp %>% drop_na()
# Create Survey design object to control weights
surv.des <- svydesign(data = df_cov_temp, ids = ~vpsu, weights = ~wgt_comb, strata = ~vstrat, nest=TRUE)
# t-test
ttest.svy <- svyttest(formula = var ~ year, design = surv.des)
stat_matrix[idx, 1] <- ttest.svy$p.value
# Forward and Backward stepwise regression
lm_full <- svyglm(formula = var ~ year+wrkstat+marital+age+race+educ+sex+born+income
+region+partyid+relig+zodiac,
design = surv.des, family=quasibinomial(link="logit"))
lm_none <- svyglm(formula = var~1, design = surv.des, family=quasibinomial(link="logit"), data = df_cov_temp)
fwd_step_mdl <- stepAIC(object = lm_none, direction='forward', scope=list(upper=lm_full, lower=lm_none))
stat_matrix[idx, 2] <- list(fwd_step_edu$anova)
# Using AIC as metric for feature selection
bkd_step_edu <- stepAIC(lm_full, direction='backward')
stat_matrix[idx, 3] <- list(bkd_step_edu$anova)
idx <- idx + 1
}
df_covariates <- df %>% dplyr::select(year, wrkstat, marital, age, race, educ, sex, born, income,
region, partyid, relig, zodiac, vstrat, vpsu, wgt_comb)
df_variables <- df %>% dplyr::select(wealth_imp, sex_imp, parents_imp, educ_imp, hardWork_imp, rightPpl_imp,
political_imp, race_imp, religion_imp)
stat_matrix <- matrix(NA, 9, 3)
idx <- 1
# (WIP) Forwards and Backwards Logistic Regression
for (col in df_variables){
# Create data we need for specific variable
df_cov_temp <- df_covariates
df_cov_temp$var <- col
df_cov_temp <- df_cov_temp %>% drop_na()
# Create Survey design object to control weights
surv.des <- svydesign(data = df_cov_temp, ids = ~vpsu, weights = ~wgt_comb, strata = ~vstrat, nest=TRUE)
# t-test
ttest.svy <- svyttest(formula = var ~ year, design = surv.des)
stat_matrix[idx, 1] <- ttest.svy$p.value
# Forward and Backward stepwise regression
lm_full <- svyglm(formula = var ~ year+wrkstat+marital+age+race+educ+sex+born+income
+region+partyid+relig+zodiac,
design = surv.des, family=quasibinomial(link="logit"))
lm_none <- svyglm(formula = var~1, design = surv.des, family=quasibinomial(link="logit"), data = df_cov_temp)
fwd_step_mdl <- stepAIC(object = lm_none, direction='forward', scope=list(upper=lm_full, lower=lm_none))
stat_matrix[idx, 2] <- list(fwd_step_mdl$anova)
# Using AIC as metric for feature selection
bkd_step_mdl <- stepAIC(lm_full, direction='backward')
stat_matrix[idx, 3] <- list(bkd_step_mdl$anova)
idx <- idx + 1
}
stat_matrix
str(list(bkd_step_edu$anova))
str(bkd_step_edu$anova)
bkd_step_edu$anova
append(list(bkd_step_edu$anova), list(bkd_step_edu$anova))
append(list(bkd_step_edu), list(bkd_step_edu))
append(list(summary(bkd_step_edu)), list(summary(bkd_step_edu)))
df_covariates <- df %>% dplyr::select(year, wrkstat, marital, age, race, educ, sex, born, income,
region, partyid, relig, zodiac, vstrat, vpsu, wgt_comb)
df_variables <- df %>% dplyr::select(wealth_imp, sex_imp, parents_imp, educ_imp, hardWork_imp, rightPpl_imp,
political_imp, race_imp, religion_imp)
stat_matrix <- matrix(NA, 9, 1)
fwd_mdl_list <- list()
bck_mdl_list <- list()
idx <- 1
# (WIP) Forwards and Backwards Logistic Regression
for (col in df_variables){
# Create data we need for specific variable
df_cov_temp <- df_covariates
df_cov_temp$var <- col
df_cov_temp <- df_cov_temp %>% drop_na()
# Create Survey design object to control weights
surv.des <- svydesign(data = df_cov_temp, ids = ~vpsu, weights = ~wgt_comb, strata = ~vstrat, nest=TRUE)
# t-test
ttest.svy <- svyttest(formula = var ~ year, design = surv.des)
stat_matrix[idx] <- ttest.svy$p.value
# Forward and Backward stepwise regression
lm_full <- svyglm(formula = var ~ year+wrkstat+marital+age+race+educ+sex+born+income
+region+partyid+relig+zodiac,
design = surv.des, family=quasibinomial(link="logit"))
lm_none <- svyglm(formula = var~1, design = surv.des, family=quasibinomial(link="logit"), data = df_cov_temp)
fwd_step_mdl <- stepAIC(object = lm_none, direction='forward', scope=list(upper=lm_full, lower=lm_none))
append(fwd_mdl_list, list(summary(fwd_step_mdl)))
# Using AIC as metric for feature selection
bkd_step_mdl <- stepAIC(lm_full, direction='backward')
append(bck_mdl_list, list(summary(bkd_step_mdl)))
idx <- idx + 1
}
df_covariates <- df %>% dplyr::select(year, wrkstat, marital, age, race, educ, sex, born, income,
region, partyid, relig, zodiac, vstrat, vpsu, wgt_comb)
df_variables <- df %>% dplyr::select(wealth_imp, sex_imp, parents_imp, educ_imp, hardWork_imp, rightPpl_imp,
political_imp, race_imp, religion_imp)
stat_matrix <- matrix(NA, 9, 1)
fwd_mdl_list <- list()
bck_mdl_list <- list()
idx <- 1
# (WIP) Forwards and Backwards Logistic Regression
for (col in df_variables){
# Create data we need for specific variable
df_cov_temp <- df_covariates
df_cov_temp$var <- col
df_cov_temp <- df_cov_temp %>% drop_na()
# Create Survey design object to control weights
surv.des <- svydesign(data = df_cov_temp, ids = ~vpsu, weights = ~wgt_comb, strata = ~vstrat, nest=TRUE)
# t-test
ttest.svy <- svyttest(formula = var ~ year, design = surv.des)
stat_matrix[idx] <- ttest.svy$p.value
# Forward and Backward stepwise regression
lm_full <- svyglm(formula = var ~ year+wrkstat+marital+age+race+educ+sex+born+income
+region+partyid+relig+zodiac,
design = surv.des, family=quasibinomial(link="logit"))
lm_none <- svyglm(formula = var~1, design = surv.des, family=quasibinomial(link="logit"), data = df_cov_temp)
fwd_step_mdl <- stepAIC(object = lm_none, direction='forward', scope=list(upper=lm_full, lower=lm_none))
fwd_mdl_list <- append(fwd_mdl_list, list(summary(fwd_step_mdl)))
# Using AIC as metric for feature selection
bkd_step_mdl <- stepAIC(lm_full, direction='backward')
bck_mdl_list <- append(bck_mdl_list, list(summary(bkd_step_mdl)))
idx <- idx + 1
}
bck_mdl_list
