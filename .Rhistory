qq <- res[[q]]
cc <- res[[c]]
g <- ggplot(res, aes(x = cc, y = qq)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = qq - 1.96 * se/sqrt(3), ymax = qq + 1.96 * se/sqrt(3)), position = position_dodge(width = 0.9), width = 0.2) +
facet_wrap(~ year,) +
xlab(c) +
labs(title = paste0(q, ", ", c)) +
theme_few()
ggsave(paste0("Group Differences/", q, "/", c, ".png"))
}
}
g
knitr::opts_chunk$set(root.dir ="/Users/arianaschindler/Documents/2023_spring/DATA2020/final_project")
# clearing environment
rm(list=ls())
# loading in the cleaned data
wd <- "~/Desktop/DSI Spring/Stats/DATA-2020/"
setwd(wd)
load("cleaned_data.Rdata")
# loading packages
library(ggplot2)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(gridExtra)
# turning race feature into categorical factor
df <- df %>%
mutate(race = ifelse(race %in% c(".n:  No answer" ,
".s:  Skipped on Web",
".i:  Inapplicable",
".d:  Do not Know/Cannot Choose"), "missing", race)) %>%
mutate(race = as.factor(race))
# turning zodiac feature into categorical factor
df <- df %>%
mutate(zodiac = ifelse(zodiac %in% c(".n:  No answer" ,
".s:  Skipped on Web",
".i:  Inapplicable",
".d:  Do not Know/Cannot Choose"), "missing", zodiac)) %>%
mutate(zodiac = as.factor(zodiac))
# turning nulls into "No Response" for possible target features
df <- df %>%
mutate(wealth_imp = ifelse(is.na(wealth_imp), "No Response", as.character(wealth_imp))) %>%
mutate(wealth_imp = factor(wealth_imp))
df <- df %>%
mutate(parents_imp = ifelse(is.na(parents_imp), "No Response", as.character(parents_imp))) %>%
mutate(parents_imp = factor(parents_imp))
df <- df %>%
mutate(educ_imp = ifelse(is.na(educ_imp), "No Response", as.character(educ_imp))) %>%
mutate(educ_imp = factor(educ_imp))
df <- df %>%
mutate(hardWork_imp = ifelse(is.na(hardWork_imp), "No Response", as.character(hardWork_imp))) %>%
mutate(hardWork_imp = factor(hardWork_imp))
df <- df %>%
mutate(rightPpl_imp = ifelse(is.na(rightPpl_imp), "No Response", as.character(rightPpl_imp))) %>%
mutate(rightPpl_imp = factor(rightPpl_imp))
df <- df %>%
mutate(political_imp = ifelse(is.na(political_imp), "No Response", as.character(political_imp))) %>%
mutate(political_imp = factor(political_imp))
df <- df %>%
mutate(race_imp = ifelse(is.na(race_imp), "No Response", as.character(race_imp))) %>%
mutate(race_imp = factor(race_imp))
df <- df %>%
mutate(religion_imp = ifelse(is.na(religion_imp), "No Response", as.character(religion_imp))) %>%
mutate(religion_imp = factor(religion_imp))
df <- df %>%
mutate(sex_imp = ifelse(is.na(sex_imp), "No Response", as.character(sex_imp))) %>%
mutate(sex_imp = factor(sex_imp))
# splitting data into two dfs for each year
df1 <- df %>%
filter(df$year=='1987')
df2 <- df %>%
filter(df$year=='2021')
# extracting dimensions for rows and columns
# 1987 data
dim_rows1 <- dim(df1)[1]
dim_cols1 <- dim(df1)[2]
#2021 data
dim_rows2 <- dim(df2)[1]
dim_cols2 <- dim(df2)[2]
# printing dimensions
cat(paste('Number of Rows in Survey Data from 1987:', dim_rows1, '\nNumber of Columns:', dim_cols1, '\n', '\nNumber of Rows in Survey Data from 2021:', dim_rows2, '\nNumber of Columns:', dim_cols2))
compute_props <- function(df, group_col, weight_col) {
d <- {{df}} %>%
group_by({{ group_col }}, year) %>%
summarize(prop = sum({{ weight_col }}, na.rm = TRUE)) %>%
ungroup() %>%
mutate(prop = prop / sum(prop))
return(d)
}
make_year_graph <- function(m) {
g <- ggplot(prop_df, aes(fill={{m}}, y=prop, x=year)) +
geom_bar(position="stack", stat="identity") +
geom_text(aes(label = scales::percent(prop)),
position = position_stack(vjust = 0.5),
size = 2) +
labs(title = deparse(substitute(m)),
x = "Response",
y = "Proportion") +
theme(text = element_text(size = 8)) +
theme_few()
}
prop_df1 <- compute_props(df1, wealth_imp, wgt_comb)
prop_df2 <- compute_props(df2, wealth_imp, wgt_comb)
prop_df <- bind_rows(prop_df1 , prop_df2)
plot_wealth_imp <- make_year_graph(wealth_imp)
plot_wealth_imp
plot(plot_wealth_imp)
make_year_graph <- function(m) {
g <- ggplot(prop_df, aes(fill={{m}}, y=prop, x=year)) +
geom_bar(position="stack", stat="identity") +
geom_text(aes(label = scales::percent(prop)),
position = position_stack(vjust = 0.5),
size = 2) +
labs(title = deparse(substitute(m)),
x = "",
y = "Proportion") +
theme(text = element_text(size = 8)) +
theme_few()
}
plot_wealth_imp <- make_year_graph(wealth_imp)
view(plot_wealth_imp)
plot(plot_wealth_imp)
g <- ggplot(prop_df, aes(fill={{m}}, y=prop, x=year)) +
geom_bar(position="stack", stat="identity") +
geom_text(aes(label = scales::percent(prop)),
position = position_stack(vjust = 0.5),
size = 2) +
labs(title = deparse(substitute(m)),
x = "",
y = "Proportion") +
theme(text = element_text(size = 8),
panel.border = element_blank()) +
theme_few()
make_year_graph <- function(m) {
g <- ggplot(prop_df, aes(fill={{m}}, y=prop, x=year)) +
geom_bar(position="stack", stat="identity") +
geom_text(aes(label = scales::percent(prop)),
position = position_stack(vjust = 0.5),
size = 2) +
labs(title = deparse(substitute(m)),
x = "",
y = "Proportion") +
theme(text = element_text(size = 8),
panel.border = element_blank()) +
theme_few()
}
prop_df1 <- compute_props(df1, wealth_imp, wgt_comb)
prop_df2 <- compute_props(df2, wealth_imp, wgt_comb)
prop_df <- bind_rows(prop_df1 , prop_df2)
plot_wealth_imp <- make_year_graph(wealth_imp)
plot(plot_wealth_imp)
plot(plot_wealth_imp)
plot(plot_wealth_imp)
make_year_graph <- function(m) {
g <- ggplot(prop_df, aes(fill={{m}}, y=prop, x=year)) +
geom_bar(position="stack", stat="identity") +
geom_text(aes(label = scales::percent(prop)),
position = position_stack(vjust = 0.5),
size = 2) +
labs(title = deparse(substitute(m)),
x = "",
y = "Proportion") +
theme(text = element_text(size = 8),
panel.border = element_blank()) +
theme_few() +
theme(text = element_text(size = 8),
panel.border = element_blank())
}
prop_df1 <- compute_props(df1, wealth_imp, wgt_comb)
prop_df2 <- compute_props(df2, wealth_imp, wgt_comb)
prop_df <- bind_rows(prop_df1 , prop_df2)
plot_wealth_imp <- make_year_graph(wealth_imp)
plot(plot_wealth_imp)
plot(plot_wealth_imp)
make_year_graph <- function(m) {
g <- ggplot(prop_df, aes(fill={{m}}, y=prop, x=year)) +
geom_bar(position="stack", stat="identity") +
geom_text(aes(label = scales::percent(prop)),
position = position_stack(vjust = 0.5),
size = 2) +
labs(title = deparse(substitute(m)),
x = "",
y = "Proportion") +
theme_few() +
theme(text = element_text(size = 18),
panel.border = element_blank())
}
prop_df1 <- compute_props(df1, wealth_imp, wgt_comb)
prop_df1 <- compute_props(df1, wealth_imp, wgt_comb)
prop_df2 <- compute_props(df2, wealth_imp, wgt_comb)
plot_wealth_imp <- make_year_graph(wealth_imp)
plot(plot_wealth_imp)
plot(plot_wealth_imp)
make_year_graph <- function(m) {
g <- ggplot(prop_df, aes(fill={{m}}, y=prop, x=year)) +
geom_bar(position="stack", stat="identity") +
geom_text(aes(label = scales::percent(prop)),
position = position_stack(vjust = 0.5),
size = 12) +
labs(title = deparse(substitute(m)),
x = "",
y = "Proportion") +
theme_few() +
theme(text = element_text(size = 18),
panel.border = element_blank())
}
prop_df1 <- compute_props(df1, wealth_imp, wgt_comb)
prop_df2 <- compute_props(df2, wealth_imp, wgt_comb)
prop_df <- bind_rows(prop_df1 , prop_df2)
plot_wealth_imp <- make_year_graph(wealth_imp)
plot_wealth_imp <- make_year_graph(wealth_imp)
prop_df1 <- compute_props(df1, wealth_imp, wgt_comb)
prop_df2 <- compute_props(df2, wealth_imp, wgt_comb)
prop_df <- bind_rows(prop_df1 , prop_df2)
plot_wealth_imp <- make_year_graph(wealth_imp)
plot(plot_wealth_imp)
plot(plot_wealth_imp)
g <- ggplot(prop_df, aes(fill={{m}}, y=prop, x=year)) +
geom_bar(position="stack", stat="identity") +
geom_text(aes(label = scales::percent(prop)),
position = position_stack(vjust = 0.5)) +
labs(title = deparse(substitute(m)),
x = "",
y = "Proportion") +
theme_few() +
theme(text = element_text(size = 18),
panel.border = element_blank())
make_year_graph <- function(m) {
g <- ggplot(prop_df, aes(fill={{m}}, y=prop, x=year)) +
geom_bar(position="stack", stat="identity") +
geom_text(aes(label = scales::percent(prop)),
position = position_stack(vjust = 0.5)) +
labs(title = deparse(substitute(m)),
x = "",
y = "Proportion") +
theme_few() +
theme(text = element_text(size = 18),
panel.border = element_blank())
}
prop_df1 <- compute_props(df1, wealth_imp, wgt_comb)
prop_df2 <- compute_props(df2, wealth_imp, wgt_comb)
prop_df <- bind_rows(prop_df1 , prop_df2)
plot_wealth_imp <- make_year_graph(wealth_imp)
plot(plot_wealth_imp)
plot(plot_wealth_imp)
make_year_graph <- function(m) {
g <- ggplot(prop_df, aes(fill={{m}}, y=prop, x=year)) +
geom_bar(position="stack", stat="identity") +
geom_text(aes(label = scales::percent(prop)),
position = position_stack(vjust = 0.5)) +
labs(title = deparse(substitute(m))) +
theme_few() +
theme(text = element_text(size = 18),
panel.border = element_blank())
}
prop_df1 <- compute_props(df1, wealth_imp, wgt_comb)
prop_df2 <- compute_props(df2, wealth_imp, wgt_comb)
prop_df <- bind_rows(prop_df1 , prop_df2)
plot_wealth_imp <- make_year_graph(wealth_imp)
plot(plot_wealth_imp)
plot(plot_wealth_imp)
make_year_graph <- function(m) {
g <- ggplot(prop_df, aes(fill={{m}}, y=prop, x=year)) +
geom_bar(position="stack", stat="identity") +
geom_text(aes(label = scales::percent(prop)),
position = position_stack(vjust = 0.5)) +
labs(title = deparse(substitute(m))) +
theme_few() +
theme(text = element_text(size = 18),
panel.border = element_blank(),
legend.position = "none") + xlab("") + ylab("")
}
prop_df1 <- compute_props(df1, wealth_imp, wgt_comb)
prop_df <- bind_rows(prop_df1 , prop_df2)
plot_wealth_imp <- make_year_graph(wealth_imp)
plot(plot_wealth_imp)
plot(plot_wealth_imp)
ggsave("EDA Images/wealth_time.png", device = "png",  width = 8, height = 6)
library(tidyverse)
library(readxl)
library(dplyr)
library(ggplot2)
library(MASS)
library(haven)
library(glmnet)
library(ggthemes)
library(survey)
load('cleaned_data.Rdata')
## Testing group differences
df_covariates <- df %>% dplyr::select(wrkstat, marital, age, race, educ, sex, born, income,
region, partyid, relig, zodiac)
df_variables <- df %>% dplyr::select(wealth_imp, sex_imp, parents_imp, educ_imp, hardWork_imp, rightPpl_imp,
political_imp, race_imp, religion_imp)
## Loop through questions
for (q in colnames(df_variables)){
for (c in colnames(df_covariates)){
df_cov_temp <- df %>% dplyr::select(q, c, year, vpsu,wgt_comb,vstrat)
df_cov_temp <- df_cov_temp %>%
filter(df[[c]] != ".i:  Inapplicable") %>% drop_na()
surv.des <- svydesign(data = df_cov_temp, ids = ~vpsu, weights = ~wgt_comb, strata = ~vstrat, nest=TRUE)
res <- svyby(~get(q), ~ get(c) + year, design = surv.des, FUN = svymean)
names(res)[1] <- c
names(res)[3] <- q
qq <- res[[q]]
cc <- res[[c]]
g <- ggplot(res, aes(x = cc, y = qq)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = qq - 1.96 * se/sqrt(3), ymax = qq + 1.96 * se/sqrt(3)), position = position_dodge(width = 0.9), width = 0.2) +
facet_wrap(~ year,) +
xlab(c) +
labs(title = paste0(q, ", ", c)) +
theme_few()
ggsave(paste0("Group Differences/", q, "/", c, ".png"))
}
}
g <- ggplot(res, aes(x = cc, y = qq)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = qq - 1.96 * se/sqrt(3), ymax = qq + 1.96 * se/sqrt(3)), position = position_dodge(width = 0.9), width = 0.2) +
facet_wrap(~ year,) +
xlab(c) +
labs(title = paste0(q, ", ", c)) +
theme_few()
g
g <- ggplot(res, aes(x = cc, y = qq)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = qq - 1.96 * se/sqrt(3), ymax = qq + 1.96 * se/sqrt(3)), position = position_dodge(width = 0.9), width = 0.2) +
facet_wrap(~ year,) +
xlab(c) +
labs(title = paste0(q, ", ", c),
y = "Proportion") +
theme_few()
g
df_cov_temp <- df %>% dplyr::select(q, c, year, vpsu,wgt_comb,vstrat)
df_cov_temp <- df_cov_temp %>%
filter(df[[c]] != ".i:  Inapplicable") %>% drop_na()
surv.des <- svydesign(data = df_cov_temp, ids = ~vpsu, weights = ~wgt_comb, strata = ~vstrat, nest=TRUE)
res <- svyby(~get(q), ~ get(c) + year, design = surv.des, FUN = svymean)
View(res)
library(tidyverse)
library(readxl)
library(dplyr)
library(ggplot2)
library(MASS)
library(haven)
library(glmnet)
library(ggthemes)
library(survey)
load('cleaned_data.Rdata')
## Testing group differences
df_covariates <- df %>% dplyr::select(wrkstat, marital, age, race, educ, sex, born, income,
region, partyid, relig, zodiac)
df_variables <- df %>% dplyr::select(wealth_imp, sex_imp, parents_imp, educ_imp, hardWork_imp, rightPpl_imp,
political_imp, race_imp, religion_imp)
## Loop through questions
for (q in colnames(df_variables)){
for (c in colnames(df_covariates)){
df_cov_temp <- df %>% dplyr::select(q, c, year, vpsu,wgt_comb,vstrat)
df_cov_temp <- df_cov_temp %>%
filter(df[[c]] != ".i:  Inapplicable") %>% drop_na()
surv.des <- svydesign(data = df_cov_temp, ids = ~vpsu, weights = ~wgt_comb, strata = ~vstrat, nest=TRUE)
res <- svyby(~get(q), ~ get(c) + year, design = surv.des, FUN = svymean)
names(res)[1] <- c
names(res)[3] <- q
qq <- res[[q]]
cc <- res[[c]]
g <- ggplot(res, aes(x = cc, y = qq)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = qq - 1.96 * se, ymax = qq + 1.96 * se), position = position_dodge(width = 0.9), width = 0.2) +
facet_wrap(~ year,) +
xlab(c) +
labs(title = paste0(q, ", ", c),
y = "Proportion") +
theme_few()
ggsave(paste0("Group Differences/", q, "/", c, ".png"))
}
}
g <- ggplot(res, aes(x = cc, y = qq)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = qq - 1.96 * se/sqrt(3), ymax = qq + 1.96 * se/sqrt(3)), position = position_dodge(width = 0.9), width = 0.2) +
facet_wrap(~ year,) +
xlab(c) +
labs(title = paste0(q, ", ", c),
y = "Proportion") +
theme_few()
g
library(tidyverse)
library(readxl)
library(dplyr)
library(ggplot2)
library(MASS)
library(haven)
library(glmnet)
library(ggthemes)
library(survey)
load('cleaned_data.Rdata')
## Testing group differences
df_covariates <- df %>% dplyr::select(wrkstat, marital, age, race, educ, sex, born, income,
region, partyid, relig, zodiac)
df_variables <- df %>% dplyr::select(wealth_imp, sex_imp, parents_imp, educ_imp, hardWork_imp, rightPpl_imp,
political_imp, race_imp, religion_imp)
## Loop through questions
for (q in colnames(df_variables)){
for (c in colnames(df_covariates)){
df_cov_temp <- df %>% dplyr::select(q, c, year, vpsu,wgt_comb,vstrat)
df_cov_temp <- df_cov_temp %>%
filter(df[[c]] != ".i:  Inapplicable") %>% drop_na()
surv.des <- svydesign(data = df_cov_temp, ids = ~vpsu, weights = ~wgt_comb, strata = ~vstrat, nest=TRUE)
res <- svyby(~get(q), ~ get(c) + year, design = surv.des, FUN = svymean)
names(res)[1] <- c
names(res)[3] <- q
qq <- res[[q]]
cc <- res[[c]]
g <- ggplot(res, aes(x = cc, y = qq)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = qq - 1.96 * se, ymax = qq + 1.96 * se), position = position_dodge(width = 0.9), width = 0.2) +
facet_wrap(~ year,) +
xlab(c) +
labs(title = paste0(q, ", ", c),
y = "Proportion") +
theme_few()
ggsave(paste0("Group Differences/", q, "/", c, ".png"))
}
}
g <- ggplot(res, aes(x = cc, y = qq)) +
g <- ggplot(res, aes(x = cc, y = qq)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = qq - 1.96 * se, ymax = qq + 1.96 * se), position = position_dodge(width = 0.9), width = 0.2) +
facet_wrap(~ year,) +
xlab(c) +
labs(title = paste0(q, ", ", c),
y = "Proportion") +
theme_few()
g <- ggplot(res, aes(x = cc, y = qq)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = qq - 1.96 * se, ymax = qq + 1.96 * se), position = position_dodge(width = 0.9), width = 0.2) +
facet_wrap(~ year,) +
xlab(c) +
labs(title = paste0(q, ", ", c),
y = "Proportion") +
theme_few()
g
g <- ggplot(res, aes(x = cc, y = qq)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = qq - 1.96 * se, ymax = qq + 1.96 * se), position = position_dodge(width = 0.9), width = 0.2) +
facet_wrap(~ year,) +
xlab(c) +
labs(title = paste0(q, ", ", c),
y = "Proportion") +
theme_few()
for (q in colnames(df_variables)){
for (c in colnames(df_covariates)){
df_cov_temp <- df %>% dplyr::select(q, c, year, vpsu,wgt_comb,vstrat)
df_cov_temp <- df_cov_temp %>%
filter(df[[c]] != ".i:  Inapplicable") %>% drop_na()
surv.des <- svydesign(data = df_cov_temp, ids = ~vpsu, weights = ~wgt_comb, strata = ~vstrat, nest=TRUE)
res <- svyby(~get(q), ~ get(c) + year, design = surv.des, FUN = svymean)
names(res)[1] <- c
names(res)[3] <- q
qq <- res[[q]]
cc <- res[[c]]
g <- ggplot(res, aes(x = cc, y = qq)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = qq - 1.96 * se, ymax = qq + 1.96 * se), position = position_dodge(width = 0.9), width = 0.2) +
facet_wrap(~ year,) +
xlab(c) +
labs(title = paste0(q, ", ", c),
y = "Proportion") +
theme_few()
ggsave(paste0("Group Differences/", q, "/", c, ".png"))
}
}
g <- ggplot(res, aes(x = cc, y = qq)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = qq - 1.96 * se, ymax = qq + 1.96 * se), position = position_dodge(width = 0.9), width = 0.2) +
facet_wrap(~ year,) +
xlab(c) +
labs(title = paste0(q, ", ", c),
y = "Proportion") +
theme_few()
g
for (q in colnames(df_variables)){
for (c in colnames(df_covariates)){
df_cov_temp <- df %>% dplyr::select(q, c, year, vpsu,wgt_comb,vstrat)
df_cov_temp <- df_cov_temp %>%
filter(df[[c]] != ".i:  Inapplicable") %>% drop_na()
surv.des <- svydesign(data = df_cov_temp, ids = ~vpsu, weights = ~wgt_comb, strata = ~vstrat, nest=TRUE)
res <- svyby(~get(q), ~ get(c) + year, design = surv.des, FUN = svymean)
names(res)[1] <- c
names(res)[3] <- q
qq <- res[[q]]
cc <- res[[c]]
g <- ggplot(res, aes(x = cc, y = qq)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = qq - 1.96 * se, ymax = qq + 1.96 * se), position = position_dodge(width = 0.9), width = 0.2) +
facet_wrap(~ year,) +
xlab(c) +
labs(title = paste0(q, ", ", c),
y = "Proportion") +
theme_few()
ggsave(paste0("Group Differences/", q, "/", c, ".png"))
}
}
g <- ggplot(res, aes(x = cc, y = qq)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = qq - 1.96 * se, ymax = qq + 1.96 * se), position = position_dodge(width = 0.9), width = 0.2) +
facet_wrap(~ year,) +
xlab(c) +
labs(title = paste0(q, ", ", c),
y = "Proportion") +
theme_few()
g
